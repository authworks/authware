import { parseUrl } from 'query-string';
import {
  GrantType,
  OAuth2Request,
  OAuth2Response,
  ResponseType,
} from '../common';
import { Grant } from './base';

export class AuthorizationCodeGrant extends Grant {
  canHandleResponseType(): ResponseType | false {
    return ResponseType.CODE;
  }

  canHandleGrantType(): GrantType | false {
    return GrantType.AUTHORIZATION_CODE;
  }
  // ========== Request ===========
  // The client constructs the request URI by adding the following
  // parameters to the query component of the authorization endpoint URI
  // using the "application/x-www-form-urlencoded" format, per Appendix B:
  //
  // - response_type
  // REQUIRED.  Value MUST be set to "code".
  //
  // - client_id
  // REQUIRED.  The client identifier as described in Section 2.2.
  //
  // - redirect_uri
  // OPTIONAL.  As described in Section 3.1.2.
  //
  // - scope
  // OPTIONAL.  The scope of the access request as described by Section 3.3.
  //
  // - state
  // RECOMMENDED.  An opaque value used by the client to maintain
  // state between the request and callback.  The authorization
  // server includes this value when redirecting the user-agent back
  // to the client.  The parameter SHOULD be used for preventing
  // cross-site request forgery as described in Section 10.12.
  // Example:
  // GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
  //         &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
  // Host: server.example.com
  // ============= Response ==============
  // - code
  // REQUIRED.  The authorization code generated by the
  // authorization server.  The authorization code MUST expire
  // shortly after it is issued to mitigate the risk of leaks.  A
  // maximum authorization code lifetime of 10 minutes is
  // RECOMMENDED.  The client MUST NOT use the authorization code
  // more than once.  If an authorization code is used more than
  // once, the authorization server MUST deny the request and SHOULD
  // revoke (when possible) all tokens previously issued based on
  // that authorization code.  The authorization code is bound to
  // the client identifier and redirection URI.
  //
  // - state
  // REQUIRED if the "state" parameter was present in the client
  // authorization request.  The exact value received from the
  // client.
  //
  // For example, the authorization server redirects the user-agent by
  // sending the following HTTP response:
  //
  // HTTP/1.1 302 Found
  // Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
  // &state=xyz
  authorize(request: OAuth2Request, response: OAuth2Response) {
    const client = this.server.verifyClient(request.query.client_id);
    const clientId = client.clientId;
    const redirectUri = client.verifyRedirectUri(request.query.redirect_uri);
    const scope = client.verifyScope(request.query.scope);
    const state = request.query.state;
    response.redirect(redirectUri, {
      code: client.generateAuthorizationCode(),
      state,
    });
  }

  // ==============Request=============
  // - grant_type
  // REQUIRED.  Value MUST be set to "authorization_code".
  //
  // - code
  // REQUIRED.  The authorization code received from the
  // authorization server.
  //
  // - redirect_uri
  // REQUIRED, if the "redirect_uri" parameter was included in the
  // authorization request as described in Section 4.1.1, and their
  // values MUST be identical.
  //
  // - client_id
  // REQUIRED, if the client is not authenticating with the
  // authorization server as described in Section 3.2.1.
  //
  // If the client type is confidential or the client was issued client
  // credentials (or assigned other authentication requirements), the
  // client MUST authenticate with the authorization server as described
  // in Section 3.2.1.
  // For example, the client makes the following HTTP request using TLS
  // (with extra line breaks for display purposes only):
  //
  // POST /token HTTP/1.1
  // Host: server.example.com
  // Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
  // Content-Type: application/x-www-form-urlencoded
  //
  // grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
  // &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
  // =============Response===============
  //   An example successful response:
  //
  //   HTTP/1.1 200 OK
  //   Content-Type: application/json;charset=UTF-8
  //   Cache-Control: no-store
  //   Pragma: no-cache
  //
  // {
  //   "access_token":"2YotnFZFEjr1zCsicMWpAA",
  //   "token_type":"example",
  //   "expires_in":3600,
  //   "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  //   "example_parameter":"example_value"
  // }
  token(request: OAuth2Request, response: OAuth2Response) {
    super.verifyTokenEndpointHttpMethod(request);
    const client = this.server.verifyClient(request.body.client_id);
    const clientId = client.clientId;
    const redirectUri = client.verifyRedirectUri(request.body.redirect_uri);
    const code = client.verifyAuthorizationCode(request.body.code);
    response.sendJson({
      access_token: client.generateAccessToken(),
      token_type: 'Bearer',
      expires_in: client.tokenExpires,
      refresh_token: client.generateRefreshToken(),
    });
  }
}

export interface AccessToken {
  clientId: string;
  accessToken: string;
  expiresIn: number;
  refreshToken?: string;
}

export interface AuthorizationCode {
  clientId: string;
  code: string;
}
